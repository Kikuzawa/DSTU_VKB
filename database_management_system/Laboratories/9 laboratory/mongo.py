from pymongo import MongoClient
from datetime import datetime
from bson import ObjectId
from pprint import pprint  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["library"]
books = db["books"]


def add_book():
    print("\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ ---")
    title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ")
    author = input("–ê–≤—Ç–æ—Ä: ")
    year = int(input("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: "))
    genres = input("–ñ–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").split(",")

    book = {
        "title": title,
        "author": author,
        "year": year,
        "genres": [genre.strip() for genre in genres],
        "is_available": True,
        "last_borrowed": None
    }

    result = books.insert_one(book)
    print(f"\n‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {result.inserted_id})")


def find_books():
    print("\n--- –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ ---")
    query = input("–ü–æ–∏—Å–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ/–∞–≤—Ç–æ—Ä/–∂–∞–Ω—Ä): ")
    results = books.find({
        "$or": [
            {"title": {"$regex": query, "$options": "i"}},
            {"author": {"$regex": query, "$options": "i"}},
            {"genres": {"$in": [query.strip()]}}
        ]
    })

    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
    for book in results:
        status = "–î–æ—Å—Ç—É–ø–Ω–∞" if book.get("is_available", True) else "–ù–∞ —Ä—É–∫–∞—Ö"
        print(f"ID: {book['_id']}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book['title']}")
        print(f"–ê–≤—Ç–æ—Ä: {book['author']}")
        print(f"–ì–æ–¥: {book['year']}")
        print(f"–ñ–∞–Ω—Ä—ã: {', '.join(book['genres'])}")
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        print("-" * 30)


def list_all_books():
    print("\n--- –í—Å–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ ---")
    all_books = books.find().sort("title", 1)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

    if books.count_documents({}) == 0:
        print("–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
        return

    for book in all_books:
        status = "üü¢ –î–æ—Å—Ç—É–ø–Ω–∞" if book.get("is_available", True) else "üî¥ –ù–∞ —Ä—É–∫–∞—Ö"
        last_borrowed = book.get("last_borrowed", "")
        if last_borrowed:
            last_borrowed = last_borrowed.strftime("%d.%m.%Y %H:%M")

        print(f"\nüìñ {book['title']} ({book['year']})")
        print(f"üë§ –ê–≤—Ç–æ—Ä: {book['author']}")
        print(f"üè∑Ô∏è –ñ–∞–Ω—Ä—ã: {', '.join(book['genres'])}")
        print(f"üìå –°—Ç–∞—Ç—É—Å: {status}")
        print(f"ID: {book['_id']}")
        if last_borrowed:
            print(f"‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—Ä–∞–ª–∏: {last_borrowed}")
            print(f"üÜî ID: {book['_id']}")


def update_book():
    print("\n--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ ---")
    list_all_books()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    book_id = input("\n–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")

    try:
        book = books.find_one({"_id": ObjectId(book_id)})
        if not book:
            print("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        print(f"\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ '{book['title']}':")
        pprint(book)

        updates = {}
        print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è):")
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ: ")
        if title: updates["title"] = title

        is_available = input("–î–æ—Å—Ç—É–ø–Ω–∞ (y/n): ").lower()
        if is_available == "y":
            updates["is_available"] = True
            updates["last_borrowed"] = None
        elif is_available == "n":
            updates["is_available"] = False
            updates["last_borrowed"] = datetime.now()

        books.update_one({"_id": ObjectId(book_id)}, {"$set": updates})
        print("\n‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")


def delete_book():
    print("\n--- –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ ---")
    list_all_books()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    book_id = input("\n–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")

    try:
        result = books.delete_one({"_id": ObjectId(book_id)})
        if result.deleted_count > 0:
            print("\n‚úÖ –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞")
        else:
            print("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")


def main():
    print("\nüìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π (MongoDB)")
    while True:
        print("\n1. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
        print("2. –ù–∞–π—Ç–∏ –∫–Ω–∏–≥–∏")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏")
        print("4. –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É")
        print("5. –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É")
        print("6. –í—ã—Ö–æ–¥")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            add_book()
        elif choice == "2":
            find_books()
        elif choice == "3":
            list_all_books()
        elif choice == "4":
            update_book()
        elif choice == "5":
            delete_book()
        elif choice == "6":
            print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()