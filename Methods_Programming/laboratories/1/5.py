# Импортируем необходимые модули для работы со стеком и типами данных
from collections import deque
from typing import Dict

def is_balanced(sequence):
    """
    Проверяет, является ли скобочная последовательность правильной согласно условиям задачи:
    - пустая последовательность считается правильной
    - если A правильная, то (A), [A], {A} тоже правильные
    - если A и B правильные, то AB тоже правильное
    
    Args:
        sequence (str): строка из скобок длиной не более 100000 символов
        
    Returns:
        bool: True если последовательность правильная, False иначе
    """
    # Создаем стек для хранения открывающих скобок
    stack: deque[str] = deque()
    
    # Словарь соответствия закрывающих и открывающих скобок
    matching_brackets: Dict[str, str] = {')': '(', '}': '{', ']': '['}

    # Проходим по каждому символу в последовательности
    for char in sequence:
        # Если встретили открывающую скобку - добавляем её в стек
        if char in matching_brackets.values():
            stack.append(char)
        # Если встретили закрывающую скобку
        elif char in matching_brackets:
            # Проверяем, что стек не пустой и верхняя скобка совпадает с текущей
            if not (stack and stack[-1] == matching_brackets[char]):
                return False  # Последовательность неправильная
            stack.pop()  # Убираем соответствующую открывающую скобку из стека

    # Последовательность правильная, если стек пуст (все скобки закрыты)
    return not bool(stack)

def main():
    """
    Основная функция программы для обработки входных данных.
    Читает строку из скобок и выводит результат проверки.
    """
    # Читаем последовательность скобок из входного потока
    sequence = input()
    
    # Выводим результат в требуемом формате
    print("yes" if is_balanced(sequence) else "no")

# Запускаем программу
main()